openapi: 3.0.0
info:
  title: Car Management API
  version: 1.0.0
  description: API for managing cars
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
  /api/auth/me:
    get:
      summary: Get current user
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /api/users/admin:
    post:
      summary: Add a new admin
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAdminRequest'
      responses:
        '201':
          description: Admin created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
  /api/cars:
    get:
      summary: Get all cars
      tags:
        - Cars
      responses:
        '200':
          description: A list of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
    post:
      summary: Create a new car
      tags:
        - Cars
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: Car created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '403':
          description: Forbidden
  /api/cars/{id}:
    put:
      summary: Update a car
      tags:
        - Cars
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Car updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '403':
          description: Forbidden
    delete:
      summary: Delete a car
      tags:
        - Cars
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Car deleted
        '403':
          description: Forbidden
components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
      required:
        - username
        - password
        - role
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    AddAdminRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        role:
          type: string
    Car:
      type: object
      properties:
        id:
          type: integer
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        created_by:
          type: integer
        updated_by:
          type: integer
        deleted_by:
          type: integer
          nullable: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
